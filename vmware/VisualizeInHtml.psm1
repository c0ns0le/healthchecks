function Get-ViLineName {
	param(
		[Parameter(Mandatory=$true)][Object]$o
	)
	if ($o -is [string])        { $o }
	elseif ($o -is [hashtable]) { $o['n'] }
	else                        {throw 'unknown type'+$o.GetType().Name }
}

function New-ViChartInfo {
	param(
		[Parameter(Mandatory=$true)][Object[]]$data, 
		[Parameter(Mandatory=$true)][Object[]]$lines,
		[Parameter(Mandatory=$false)][Object]$xAxisValues
	)

	Write-Debug "Charts length: $($lines.count)"
	New-Object PsObject | 
		Add-Member NoteProperty Data $data -PassThru |
		Add-Member NoteProperty Lines $lines -PassThru |
		Add-Member NoteProperty XAxis $xAxisValues -PassThru
}

# $inputObject should be created via New-ViChartInfo
# ConvertTo-ViData -inputObject `
#	(New-ViChartInfo -data `
#		([datetime]'2009-11-4 00:1',[datetime]'2009-10-15 10:12') `
#	-lines 'Minute', `
#		@{'n'='min+ho';'e'={$_.Minute+$_.Hour}},`
#		'"date"."Day"')
function ConvertTo-ViData {
	param(
		[Parameter(Mandatory=$true,ValueFromPipeline=$true)][PsObject]$inputObject
	)

	$objs = @()
	foreach($line in @($inputObject.Lines)) {
		Write-Debug "Processing one line for conversion"
		$lineName = Get-ViLineName $line
		$data = $inputObject.Data
		
		Write-Debug "Found name: $lineName"
		$res = New-Object PsObject |
			Add-Member NoteProperty Name $lineName -PassThru |
			Add-Member NoteProperty Values (New-Object Collections.ArrayList) -PassThru
		if ($line -is [string]) {
			Write-Debug "Getting values using property name: $line"
			$getter = {$ExecutionContext.InvokeCommand.ExpandString('$($_.'+$line+')')}
			Write-Debug "Getter: $getter"
			$data | % { 
				$null=$res.Values.Add((& $getter))
			}
		} elseif ($line -is [hashtable]) {
			if ($line['datafilter'] -ne $null) {
				if (!$line['datafilter'] -is [scriptblock]) { throw 'value ''datafilter'' must be scriptblock, that can be passed to where-object' }
				Write-Debug ("Running data filter " + $line['datafilter'].tostring())
				$data = $data | ? { & $line['datafilter'] $_ } # pozor - musi vyuzivat args[0], ne $_; nevim proc, ale $_ bylo vzdycky $null
				$line.remove('datafilter')
				Write-Debug "Data count before: $($inputObject.Data.Count), after: $($data.Count)"
			}
			if ($line['dataconvertor'] -ne $null) {
				if (!$line['dataconvertor'] -is [scriptblock]) { throw 'value ''dataconvertor'' must be scriptblock' }
				Write-Debug ("Running convertor " + $line['dataconvertor'].tostring())
				$data = $data | % { & $line['dataconvertor'] $_ }
				$line.remove('dataconvertor')
			}
			$data | 
				select -Property $line | 
				% { $null=$res.Values.Add($_."$lineName") }
		} else {
			throw 'unknown type'+$line.GetType().Name
		}
		$objs += $res
	}
	$xaxis = $inputObject.XAxis
	if ($xaxis -eq $null) {
		Write-Debug "Default axis values"
		$xAxisValues = 0..($inputObject.Data.Count-1)
	} elseif ($xaxis -is [string]) {
		Write-Debug "Getting values for xaxis: $xaxis"
		$getter = {$ExecutionContext.InvokeCommand.ExpandString('$($_.'+$xaxis+')')}
		$xAxisValues = $inputObject.Data | % { (& $getter) }
	} elseif ($xaxis -is [hashtable]) {
		$propName = Get-ViLineName $xaxis
		$xAxisValues = $inputObject.Data | select -Property $xaxis | % { $_.$propName }
	} elseif ($xaxis -is [Collections.IEnumerable]) {
		$xAxisValues = $xaxis
	} else {
		throw 'unknown type'+$line.GetType().Name
	}
		
	($xAxisValues, $objs)
}
# how to call:
#1) New-ViChart -outputFile m:\data\src\PowerShell\tools\a.html  `
# -input (`
#	New-ViChartInfo `
#		-data `
#		   ((1..70|%{[DateTime]::Now.AddMinutes($_)})+ `
#		    (1..20|%{[DateTime]::Now.AddHours($_*6).AddMinutes($_*(Get-Random -min 0 -max 3))}))`
#		-lines 'Minute','Hour','"Date"+"Day"'),
#	(New-ViChartInfo `
#		-data `
#		   (1..120|%{[DateTime]::Now.AddMinutes($_*(Get-Random -min 0 -max 8))})`
#		-lines 'Minute','Hour',@{'n'='min+hour';'e'={$_.Minute+$_.Hour}})
# 2) $ff = 1..10|%{start-sleep -sec 3; get-process firefox}
#New-ViChart -outputFile m:\data\src\PowerShell\tools\a.html  `
# -input`
#	(New-ViChartInfo -data $ff -lines 'WorkingSet','PagedMemorySize','PrivateMemorySize'), 
#	(New-ViChartInfo -data $ff -lines '"TotalProcessorTime"."TotalMilliseconds"',@{'n'='uproc';'e'={$_.UserProcessorTime.TotalMilliseconds}})
function New-ViChart {
	param(
		[Parameter(Mandatory=$true,ValueFromPipeline=$true)][PsObject[]]$inputObject, 
		[Parameter(Mandatory=$true)][string]$outputFile
	)

	Write-Debug "Input objects length: $($inputObject.count)"
	$tables = ''
	foreach ($inputo in $inputObject) {
		Write-Debug "Processing one chart`n----------------"
		$xaxisVals,$lineObjects = ConvertTo-ViData $inputo
		$thead       = "<thead><tr><td></td>" + ($xaxisVals | %{"<th>$_</th>" }) + "</tr></thead>"
		$rows        = ''
		foreach($line in @($lineObjects)) {
			Write-Debug "Processing one line: $($line.Name)"
			$rows = $rows + ("`n`t`t<tr><th>{0}</th>" -f $line.Name) + ($line.Values | % { "<td>$_</td>" })+ "`n`t`t</tr>"
			Write-Debug "rows length: $($rows.length)"
		}
		
		$tables += "`n<table class=`"values`">`n`t$thead`n`t<tbody>$rows`n`t</tbody>`n</table>`n"
	}

	$base64jquery = ''
	$base64jqueryPlugin = ''
	$base64jQueryCompiledPlugin = 'ZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiY2FudmFzIikuZ2V0Q29udGV4dHx8KGZ1bmN0aW9uKCl7dmFyIHM9TWF0aCxqPXMucm91bmQsRj1zLnNpbixHPXMuY29zLFY9cy5hYnMsVz1zLnNxcnQsaz0xMCx2PWsvMjtmdW5jdGlvbiBYKCl7cmV0dXJuIHRoaXMuY29udGV4dF98fCh0aGlzLmNvbnRleHRfPW5ldyBIKHRoaXMpKX12YXIgTD1BcnJheS5wcm90b3R5cGUuc2xpY2U7ZnVuY3Rpb24gWShiLGEpe3ZhciBjPUwuY2FsbChhcmd1bWVudHMsMik7cmV0dXJuIGZ1bmN0aW9uKCl7cmV0dXJuIGIuYXBwbHkoYSxjLmNvbmNhdChMLmNhbGwoYXJndW1lbnRzKSkpfX12YXIgTT17aW5pdDpmdW5jdGlvbihiKXtpZigvTVNJRS8udGVzdChuYXZpZ2F0b3IudXNlckFnZW50KSYmIXdpbmRvdy5vcGVyYSl7dmFyIGE9Ynx8ZG9jdW1lbnQ7YS5jcmVhdGVFbGVtZW50KCJjYW52YXMiKTthLmF0dGFjaEV2ZW50KCJvbnJlYWR5c3RhdGVjaGFuZ2UiLFkodGhpcy5pbml0Xyx0aGlzLGEpKX19LGluaXRfOmZ1bmN0aW9uKGIpe2IubmFtZXNwYWNlcy5nX3ZtbF98fA0KCQkJYi5uYW1lc3BhY2VzLmFkZCgiZ192bWxfIiwidXJuOnNjaGVtYXMtbWljcm9zb2Z0LWNvbTp2bWwiLCIjZGVmYXVsdCNWTUwiKTtiLm5hbWVzcGFjZXMuZ19vX3x8Yi5uYW1lc3BhY2VzLmFkZCgiZ19vXyIsInVybjpzY2hlbWFzLW1pY3Jvc29mdC1jb206b2ZmaWNlOm9mZmljZSIsIiNkZWZhdWx0I1ZNTCIpO2lmKCFiLnN0eWxlU2hlZXRzLmV4X2NhbnZhc18pe3ZhciBhPWIuY3JlYXRlU3R5bGVTaGVldCgpO2Eub3duaW5nRWxlbWVudC5pZD0iZXhfY2FudmFzXyI7YS5jc3NUZXh0PSJjYW52YXN7ZGlzcGxheTppbmxpbmUtYmxvY2s7b3ZlcmZsb3c6aGlkZGVuO3RleHQtYWxpZ246bGVmdDt3aWR0aDozMDBweDtoZWlnaHQ6MTUwcHh9Z192bWxfXFw6KntiZWhhdmlvcjp1cmwoI2RlZmF1bHQjVk1MKX1nX29fXFw6KntiZWhhdmlvcjp1cmwoI2RlZmF1bHQjVk1MKX0ifXZhciBjPWIuZ2V0RWxlbWVudHNCeVRhZ05hbWUoImNhbnZhcyIpLGQ9MDtmb3IoO2Q8Yy5sZW5ndGg7ZCsrKXRoaXMuaW5pdEVsZW1lbnQoY1tkXSl9LA0KCQkJaW5pdEVsZW1lbnQ6ZnVuY3Rpb24oYil7aWYoIWIuZ2V0Q29udGV4dCl7Yi5nZXRDb250ZXh0PVg7Yi5pbm5lckhUTUw9IiI7Yi5hdHRhY2hFdmVudCgib25wcm9wZXJ0eWNoYW5nZSIsWik7Yi5hdHRhY2hFdmVudCgib25yZXNpemUiLCQpO3ZhciBhPWIuYXR0cmlidXRlcztpZihhLndpZHRoJiZhLndpZHRoLnNwZWNpZmllZCliLnN0eWxlLndpZHRoPWEud2lkdGgubm9kZVZhbHVlKyJweCI7ZWxzZSBiLndpZHRoPWIuY2xpZW50V2lkdGg7aWYoYS5oZWlnaHQmJmEuaGVpZ2h0LnNwZWNpZmllZCliLnN0eWxlLmhlaWdodD1hLmhlaWdodC5ub2RlVmFsdWUrInB4IjtlbHNlIGIuaGVpZ2h0PWIuY2xpZW50SGVpZ2h0fXJldHVybiBifX07ZnVuY3Rpb24gWihiKXt2YXIgYT1iLnNyY0VsZW1lbnQ7c3dpdGNoKGIucHJvcGVydHlOYW1lKXtjYXNlICJ3aWR0aCI6YS5zdHlsZS53aWR0aD1hLmF0dHJpYnV0ZXMud2lkdGgubm9kZVZhbHVlKyJweCI7YS5nZXRDb250ZXh0KCkuY2xlYXJSZWN0KCk7DQoJCQlicmVhaztjYXNlICJoZWlnaHQiOmEuc3R5bGUuaGVpZ2h0PWEuYXR0cmlidXRlcy5oZWlnaHQubm9kZVZhbHVlKyJweCI7YS5nZXRDb250ZXh0KCkuY2xlYXJSZWN0KCk7YnJlYWt9fWZ1bmN0aW9uICQoYil7dmFyIGE9Yi5zcmNFbGVtZW50O2lmKGEuZmlyc3RDaGlsZCl7YS5maXJzdENoaWxkLnN0eWxlLndpZHRoPWEuY2xpZW50V2lkdGgrInB4IjthLmZpcnN0Q2hpbGQuc3R5bGUuaGVpZ2h0PWEuY2xpZW50SGVpZ2h0KyJweCJ9fU0uaW5pdCgpO3ZhciBOPVtdLEI9MDtmb3IoO0I8MTY7QisrKXt2YXIgQz0wO2Zvcig7QzwxNjtDKyspTltCKjE2K0NdPUIudG9TdHJpbmcoMTYpK0MudG9TdHJpbmcoMTYpfWZ1bmN0aW9uIEkoKXtyZXR1cm5bWzEsMCwwXSxbMCwxLDBdLFswLDAsMV1dfWZ1bmN0aW9uIHkoYixhKXt2YXIgYz1JKCksZD0wO2Zvcig7ZDwzO2QrKyl7dmFyIGY9MDtmb3IoO2Y8MztmKyspe3ZhciBoPTAsZz0wO2Zvcig7ZzwzO2crKyloKz1iW2RdW2ddKmFbZ11bZl07Y1tkXVtmXT0NCgkJCWh9fXJldHVybiBjfWZ1bmN0aW9uIE8oYixhKXthLmZpbGxTdHlsZT1iLmZpbGxTdHlsZTthLmxpbmVDYXA9Yi5saW5lQ2FwO2EubGluZUpvaW49Yi5saW5lSm9pbjthLmxpbmVXaWR0aD1iLmxpbmVXaWR0aDthLm1pdGVyTGltaXQ9Yi5taXRlckxpbWl0O2Euc2hhZG93Qmx1cj1iLnNoYWRvd0JsdXI7YS5zaGFkb3dDb2xvcj1iLnNoYWRvd0NvbG9yO2Euc2hhZG93T2Zmc2V0WD1iLnNoYWRvd09mZnNldFg7YS5zaGFkb3dPZmZzZXRZPWIuc2hhZG93T2Zmc2V0WTthLnN0cm9rZVN0eWxlPWIuc3Ryb2tlU3R5bGU7YS5nbG9iYWxBbHBoYT1iLmdsb2JhbEFscGhhO2EuYXJjU2NhbGVYXz1iLmFyY1NjYWxlWF87YS5hcmNTY2FsZVlfPWIuYXJjU2NhbGVZXzthLmxpbmVTY2FsZV89Yi5saW5lU2NhbGVffWZ1bmN0aW9uIFAoYil7dmFyIGEsYz0xO2I9U3RyaW5nKGIpO2lmKGIuc3Vic3RyaW5nKDAsMyk9PSJyZ2IiKXt2YXIgZD1iLmluZGV4T2YoIigiLDMpLGY9Yi5pbmRleE9mKCIpIixkKw0KCQkJMSksaD1iLnN1YnN0cmluZyhkKzEsZikuc3BsaXQoIiwiKTthPSIjIjt2YXIgZz0wO2Zvcig7ZzwzO2crKylhKz1OW051bWJlcihoW2ddKV07aWYoaC5sZW5ndGg9PTQmJmIuc3Vic3RyKDMsMSk9PSJhIiljPWhbM119ZWxzZSBhPWI7cmV0dXJue2NvbG9yOmEsYWxwaGE6Y319ZnVuY3Rpb24gYWEoYil7c3dpdGNoKGIpe2Nhc2UgImJ1dHQiOnJldHVybiJmbGF0IjtjYXNlICJyb3VuZCI6cmV0dXJuInJvdW5kIjtjYXNlICJzcXVhcmUiOmRlZmF1bHQ6cmV0dXJuInNxdWFyZSJ9fWZ1bmN0aW9uIEgoYil7dGhpcy5tXz1JKCk7dGhpcy5tU3RhY2tfPVtdO3RoaXMuYVN0YWNrXz1bXTt0aGlzLmN1cnJlbnRQYXRoXz1bXTt0aGlzLmZpbGxTdHlsZT10aGlzLnN0cm9rZVN0eWxlPSIjMDAwIjt0aGlzLmxpbmVXaWR0aD0xO3RoaXMubGluZUpvaW49Im1pdGVyIjt0aGlzLmxpbmVDYXA9ImJ1dHQiO3RoaXMubWl0ZXJMaW1pdD1rKjE7dGhpcy5nbG9iYWxBbHBoYT0xO3RoaXMuY2FudmFzPWI7DQoJCQl2YXIgYT1iLm93bmVyRG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiZGl2Iik7YS5zdHlsZS53aWR0aD1iLmNsaWVudFdpZHRoKyJweCI7YS5zdHlsZS5oZWlnaHQ9Yi5jbGllbnRIZWlnaHQrInB4IjthLnN0eWxlLm92ZXJmbG93PSJoaWRkZW4iO2Euc3R5bGUucG9zaXRpb249ImFic29sdXRlIjtiLmFwcGVuZENoaWxkKGEpO3RoaXMuZWxlbWVudF89YTt0aGlzLmxpbmVTY2FsZV89dGhpcy5hcmNTY2FsZVlfPXRoaXMuYXJjU2NhbGVYXz0xfXZhciBpPUgucHJvdG90eXBlO2kuY2xlYXJSZWN0PWZ1bmN0aW9uKCl7dGhpcy5lbGVtZW50Xy5pbm5lckhUTUw9IiJ9O2kuYmVnaW5QYXRoPWZ1bmN0aW9uKCl7dGhpcy5jdXJyZW50UGF0aF89W119O2kubW92ZVRvPWZ1bmN0aW9uKGIsYSl7dmFyIGM9dGhpcy5nZXRDb29yZHNfKGIsYSk7dGhpcy5jdXJyZW50UGF0aF8ucHVzaCh7dHlwZToibW92ZVRvIix4OmMueCx5OmMueX0pO3RoaXMuY3VycmVudFhfPWMueDt0aGlzLmN1cnJlbnRZXz1jLnl9Ow0KCQkJaS5saW5lVG89ZnVuY3Rpb24oYixhKXt2YXIgYz10aGlzLmdldENvb3Jkc18oYixhKTt0aGlzLmN1cnJlbnRQYXRoXy5wdXNoKHt0eXBlOiJsaW5lVG8iLHg6Yy54LHk6Yy55fSk7dGhpcy5jdXJyZW50WF89Yy54O3RoaXMuY3VycmVudFlfPWMueX07aS5iZXppZXJDdXJ2ZVRvPWZ1bmN0aW9uKGIsYSxjLGQsZixoKXt2YXIgZz10aGlzLmdldENvb3Jkc18oZixoKSxsPXRoaXMuZ2V0Q29vcmRzXyhiLGEpLGU9dGhpcy5nZXRDb29yZHNfKGMsZCk7USh0aGlzLGwsZSxnKX07ZnVuY3Rpb24gUShiLGEsYyxkKXtiLmN1cnJlbnRQYXRoXy5wdXNoKHt0eXBlOiJiZXppZXJDdXJ2ZVRvIixjcDF4OmEueCxjcDF5OmEueSxjcDJ4OmMueCxjcDJ5OmMueSx4OmQueCx5OmQueX0pO2IuY3VycmVudFhfPWQueDtiLmN1cnJlbnRZXz1kLnl9aS5xdWFkcmF0aWNDdXJ2ZVRvPWZ1bmN0aW9uKGIsYSxjLGQpe3ZhciBmPXRoaXMuZ2V0Q29vcmRzXyhiLGEpLGg9dGhpcy5nZXRDb29yZHNfKGMsZCksZz17eDp0aGlzLmN1cnJlbnRYXysNCgkJCTAuNjY2NjY2NjY2NjY2NjY2NiooZi54LXRoaXMuY3VycmVudFhfKSx5OnRoaXMuY3VycmVudFlfKzAuNjY2NjY2NjY2NjY2NjY2NiooZi55LXRoaXMuY3VycmVudFlfKX07USh0aGlzLGcse3g6Zy54KyhoLngtdGhpcy5jdXJyZW50WF8pLzMseTpnLnkrKGgueS10aGlzLmN1cnJlbnRZXykvM30saCl9O2kuYXJjPWZ1bmN0aW9uKGIsYSxjLGQsZixoKXtjKj1rO3ZhciBnPWg/ImF0Ijoid2EiLGw9YitHKGQpKmMtdixlPWErRihkKSpjLXYsbT1iK0coZikqYy12LHI9YStGKGYpKmMtdjtpZihsPT1tJiYhaClsKz0wLjEyNTt2YXIgbj10aGlzLmdldENvb3Jkc18oYixhKSxvPXRoaXMuZ2V0Q29vcmRzXyhsLGUpLHE9dGhpcy5nZXRDb29yZHNfKG0scik7dGhpcy5jdXJyZW50UGF0aF8ucHVzaCh7dHlwZTpnLHg6bi54LHk6bi55LHJhZGl1czpjLHhTdGFydDpvLngseVN0YXJ0Om8ueSx4RW5kOnEueCx5RW5kOnEueX0pfTtpLnJlY3Q9ZnVuY3Rpb24oYixhLGMsZCl7dGhpcy5tb3ZlVG8oYiwNCgkJCWEpO3RoaXMubGluZVRvKGIrYyxhKTt0aGlzLmxpbmVUbyhiK2MsYStkKTt0aGlzLmxpbmVUbyhiLGErZCk7dGhpcy5jbG9zZVBhdGgoKX07aS5zdHJva2VSZWN0PWZ1bmN0aW9uKGIsYSxjLGQpe3ZhciBmPXRoaXMuY3VycmVudFBhdGhfO3RoaXMuYmVnaW5QYXRoKCk7dGhpcy5tb3ZlVG8oYixhKTt0aGlzLmxpbmVUbyhiK2MsYSk7dGhpcy5saW5lVG8oYitjLGErZCk7dGhpcy5saW5lVG8oYixhK2QpO3RoaXMuY2xvc2VQYXRoKCk7dGhpcy5zdHJva2UoKTt0aGlzLmN1cnJlbnRQYXRoXz1mfTtpLmZpbGxSZWN0PWZ1bmN0aW9uKGIsYSxjLGQpe3ZhciBmPXRoaXMuY3VycmVudFBhdGhfO3RoaXMuYmVnaW5QYXRoKCk7dGhpcy5tb3ZlVG8oYixhKTt0aGlzLmxpbmVUbyhiK2MsYSk7dGhpcy5saW5lVG8oYitjLGErZCk7dGhpcy5saW5lVG8oYixhK2QpO3RoaXMuY2xvc2VQYXRoKCk7dGhpcy5maWxsKCk7dGhpcy5jdXJyZW50UGF0aF89Zn07aS5jcmVhdGVMaW5lYXJHcmFkaWVudD1mdW5jdGlvbihiLA0KCQkJYSxjLGQpe3ZhciBmPW5ldyBEKCJncmFkaWVudCIpO2YueDBfPWI7Zi55MF89YTtmLngxXz1jO2YueTFfPWQ7cmV0dXJuIGZ9O2kuY3JlYXRlUmFkaWFsR3JhZGllbnQ9ZnVuY3Rpb24oYixhLGMsZCxmLGgpe3ZhciBnPW5ldyBEKCJncmFkaWVudHJhZGlhbCIpO2cueDBfPWI7Zy55MF89YTtnLnIwXz1jO2cueDFfPWQ7Zy55MV89ZjtnLnIxXz1oO3JldHVybiBnfTtpLmRyYXdJbWFnZT1mdW5jdGlvbihiKXt2YXIgYSxjLGQsZixoLGcsbCxlLG09Yi5ydW50aW1lU3R5bGUud2lkdGgscj1iLnJ1bnRpbWVTdHlsZS5oZWlnaHQ7Yi5ydW50aW1lU3R5bGUud2lkdGg9ImF1dG8iO2IucnVudGltZVN0eWxlLmhlaWdodD0iYXV0byI7dmFyIG49Yi53aWR0aCxvPWIuaGVpZ2h0O2IucnVudGltZVN0eWxlLndpZHRoPW07Yi5ydW50aW1lU3R5bGUuaGVpZ2h0PXI7aWYoYXJndW1lbnRzLmxlbmd0aD09Myl7YT1hcmd1bWVudHNbMV07Yz1hcmd1bWVudHNbMl07aD1nPTA7bD1kPW47ZT1mPW99ZWxzZSBpZihhcmd1bWVudHMubGVuZ3RoPT0NCgkJCTUpe2E9YXJndW1lbnRzWzFdO2M9YXJndW1lbnRzWzJdO2Q9YXJndW1lbnRzWzNdO2Y9YXJndW1lbnRzWzRdO2g9Zz0wO2w9bjtlPW99ZWxzZSBpZihhcmd1bWVudHMubGVuZ3RoPT05KXtoPWFyZ3VtZW50c1sxXTtnPWFyZ3VtZW50c1syXTtsPWFyZ3VtZW50c1szXTtlPWFyZ3VtZW50c1s0XTthPWFyZ3VtZW50c1s1XTtjPWFyZ3VtZW50c1s2XTtkPWFyZ3VtZW50c1s3XTtmPWFyZ3VtZW50c1s4XX1lbHNlIHRocm93IEVycm9yKCJJbnZhbGlkIG51bWJlciBvZiBhcmd1bWVudHMiKTt2YXIgcT10aGlzLmdldENvb3Jkc18oYSxjKSx0PVtdO3QucHVzaCgiIDxnX3ZtbF86Z3JvdXAiLCcgY29vcmRzaXplPSInLGsqMTAsIiwiLGsqMTAsJyInLCcgY29vcmRvcmlnaW49IjAsMCInLCcgc3R5bGU9IndpZHRoOicsMTAsInB4O2hlaWdodDoiLDEwLCJweDtwb3NpdGlvbjphYnNvbHV0ZTsiKTtpZih0aGlzLm1fWzBdWzBdIT0xfHx0aGlzLm1fWzBdWzFdKXt2YXIgRT1bXTtFLnB1c2goIk0xMT0iLA0KCQkJdGhpcy5tX1swXVswXSwiLCIsIk0xMj0iLHRoaXMubV9bMV1bMF0sIiwiLCJNMjE9Iix0aGlzLm1fWzBdWzFdLCIsIiwiTTIyPSIsdGhpcy5tX1sxXVsxXSwiLCIsIkR4PSIsaihxLngvayksIiwiLCJEeT0iLGoocS55L2spLCIiKTt2YXIgcD1xLHo9dGhpcy5nZXRDb29yZHNfKGErZCxjKSx3PXRoaXMuZ2V0Q29vcmRzXyhhLGMrZikseD10aGlzLmdldENvb3Jkc18oYStkLGMrZik7cC54PXMubWF4KHAueCx6Lngsdy54LHgueCk7cC55PXMubWF4KHAueSx6Lnksdy55LHgueSk7dC5wdXNoKCJwYWRkaW5nOjAgIixqKHAueC9rKSwicHggIixqKHAueS9rKSwicHggMDtmaWx0ZXI6cHJvZ2lkOkRYSW1hZ2VUcmFuc2Zvcm0uTWljcm9zb2Z0Lk1hdHJpeCgiLEUuam9pbigiIiksIiwgc2l6aW5nbWV0aG9kPSdjbGlwJyk7Iil9ZWxzZSB0LnB1c2goInRvcDoiLGoocS55L2spLCJweDtsZWZ0OiIsaihxLngvayksInB4OyIpO3QucHVzaCgnICI+JywnPGdfdm1sXzppbWFnZSBzcmM9IicsYi5zcmMsDQoJCQknIicsJyBzdHlsZT0id2lkdGg6JyxrKmQsInB4OyIsIiBoZWlnaHQ6IixrKmYsJ3B4OyInLCcgY3JvcGxlZnQ9IicsaC9uLCciJywnIGNyb3B0b3A9IicsZy9vLCciJywnIGNyb3ByaWdodD0iJywobi1oLWwpL24sJyInLCcgY3JvcGJvdHRvbT0iJywoby1nLWUpL28sJyInLCIgLz4iLCI8L2dfdm1sXzpncm91cD4iKTt0aGlzLmVsZW1lbnRfLmluc2VydEFkamFjZW50SFRNTCgiQmVmb3JlRW5kIix0LmpvaW4oIiIpKX07aS5zdHJva2U9ZnVuY3Rpb24oYil7dmFyIGE9W10sYz1QKGI/dGhpcy5maWxsU3R5bGU6dGhpcy5zdHJva2VTdHlsZSksZD1jLmNvbG9yLGY9Yy5hbHBoYSp0aGlzLmdsb2JhbEFscGhhO2EucHVzaCgiPGdfdm1sXzpzaGFwZSIsJyBmaWxsZWQ9IicsISFiLCciJywnIHN0eWxlPSJwb3NpdGlvbjphYnNvbHV0ZTt3aWR0aDonLDEwLCJweDtoZWlnaHQ6IiwxMCwncHg7IicsJyBjb29yZG9yaWdpbj0iMCAwIiBjb29yZHNpemU9IicsayoxMCwiICIsayoxMCwnIicsJyBzdHJva2VkPSInLA0KCQkJIWIsJyInLCcgcGF0aD0iJyk7dmFyIGg9e3g6bnVsbCx5Om51bGx9LGc9e3g6bnVsbCx5Om51bGx9LGw9MDtmb3IoO2w8dGhpcy5jdXJyZW50UGF0aF8ubGVuZ3RoO2wrKyl7dmFyIGU9dGhpcy5jdXJyZW50UGF0aF9bbF07c3dpdGNoKGUudHlwZSl7Y2FzZSAibW92ZVRvIjphLnB1c2goIiBtICIsaihlLngpLCIsIixqKGUueSkpO2JyZWFrO2Nhc2UgImxpbmVUbyI6YS5wdXNoKCIgbCAiLGooZS54KSwiLCIsaihlLnkpKTticmVhaztjYXNlICJjbG9zZSI6YS5wdXNoKCIgeCAiKTtlPW51bGw7YnJlYWs7Y2FzZSAiYmV6aWVyQ3VydmVUbyI6YS5wdXNoKCIgYyAiLGooZS5jcDF4KSwiLCIsaihlLmNwMXkpLCIsIixqKGUuY3AyeCksIiwiLGooZS5jcDJ5KSwiLCIsaihlLngpLCIsIixqKGUueSkpO2JyZWFrO2Nhc2UgImF0IjpjYXNlICJ3YSI6YS5wdXNoKCIgIixlLnR5cGUsIiAiLGooZS54LXRoaXMuYXJjU2NhbGVYXyplLnJhZGl1cyksIiwiLGooZS55LXRoaXMuYXJjU2NhbGVZXyplLnJhZGl1cyksDQoJCQkiICIsaihlLngrdGhpcy5hcmNTY2FsZVhfKmUucmFkaXVzKSwiLCIsaihlLnkrdGhpcy5hcmNTY2FsZVlfKmUucmFkaXVzKSwiICIsaihlLnhTdGFydCksIiwiLGooZS55U3RhcnQpLCIgIixqKGUueEVuZCksIiwiLGooZS55RW5kKSk7YnJlYWt9aWYoZSl7aWYoaC54PT1udWxsfHxlLng8aC54KWgueD1lLng7aWYoZy54PT1udWxsfHxlLng+Zy54KWcueD1lLng7aWYoaC55PT1udWxsfHxlLnk8aC55KWgueT1lLnk7aWYoZy55PT1udWxsfHxlLnk+Zy55KWcueT1lLnl9fWEucHVzaCgnICI+Jyk7aWYoYilpZih0eXBlb2YgdGhpcy5maWxsU3R5bGU9PSJvYmplY3QiKXt2YXIgbT10aGlzLmZpbGxTdHlsZSxyPTAsbj17eDowLHk6MH0sbz0wLHE9MTtpZihtLnR5cGVfPT0iZ3JhZGllbnQiKXt2YXIgdD1tLngxXy90aGlzLmFyY1NjYWxlWF8sRT1tLnkxXy90aGlzLmFyY1NjYWxlWV8scD10aGlzLmdldENvb3Jkc18obS54MF8vdGhpcy5hcmNTY2FsZVhfLG0ueTBfL3RoaXMuYXJjU2NhbGVZXyksDQoJCQl6PXRoaXMuZ2V0Q29vcmRzXyh0LEUpO3I9TWF0aC5hdGFuMih6LngtcC54LHoueS1wLnkpKjE4MC9NYXRoLlBJO2lmKHI8MClyKz0zNjA7aWYocjwxLjBFLTYpcj0wfWVsc2V7dmFyIHA9dGhpcy5nZXRDb29yZHNfKG0ueDBfLG0ueTBfKSx3PWcueC1oLngseD1nLnktaC55O249e3g6KHAueC1oLngpL3cseToocC55LWgueSkveH07dy89dGhpcy5hcmNTY2FsZVhfKms7eC89dGhpcy5hcmNTY2FsZVlfKms7dmFyIFI9cy5tYXgodyx4KTtvPTIqbS5yMF8vUjtxPTIqbS5yMV8vUi1vfXZhciB1PW0uY29sb3JzXzt1LnNvcnQoZnVuY3Rpb24oYmEsY2Epe3JldHVybiBiYS5vZmZzZXQtY2Eub2Zmc2V0fSk7dmFyIEo9dS5sZW5ndGgsZGE9dVswXS5jb2xvcixlYT11W0otMV0uY29sb3IsZmE9dVswXS5hbHBoYSp0aGlzLmdsb2JhbEFscGhhLGdhPXVbSi0xXS5hbHBoYSp0aGlzLmdsb2JhbEFscGhhLFM9W10sbD0wO2Zvcig7bDxKO2wrKyl7dmFyIFQ9dVtsXTtTLnB1c2goVC5vZmZzZXQqcSsNCgkJCW8rIiAiK1QuY29sb3IpfWEucHVzaCgnPGdfdm1sXzpmaWxsIHR5cGU9IicsbS50eXBlXywnIicsJyBtZXRob2Q9Im5vbmUiIGZvY3VzPSIxMDAlIicsJyBjb2xvcj0iJyxkYSwnIicsJyBjb2xvcjI9IicsZWEsJyInLCcgY29sb3JzPSInLFMuam9pbigiLCIpLCciJywnIG9wYWNpdHk9IicsZ2EsJyInLCcgZ19vXzpvcGFjaXR5Mj0iJyxmYSwnIicsJyBhbmdsZT0iJyxyLCciJywnIGZvY3VzcG9zaXRpb249Iicsbi54LCIsIixuLnksJyIgLz4nKX1lbHNlIGEucHVzaCgnPGdfdm1sXzpmaWxsIGNvbG9yPSInLGQsJyIgb3BhY2l0eT0iJyxmLCciIC8+Jyk7ZWxzZXt2YXIgSz10aGlzLmxpbmVTY2FsZV8qdGhpcy5saW5lV2lkdGg7aWYoSzwxKWYqPUs7YS5wdXNoKCI8Z192bWxfOnN0cm9rZSIsJyBvcGFjaXR5PSInLGYsJyInLCcgam9pbnN0eWxlPSInLHRoaXMubGluZUpvaW4sJyInLCcgbWl0ZXJsaW1pdD0iJyx0aGlzLm1pdGVyTGltaXQsJyInLCcgZW5kY2FwPSInLGFhKHRoaXMubGluZUNhcCksDQoJCQknIicsJyB3ZWlnaHQ9IicsSywncHgiJywnIGNvbG9yPSInLGQsJyIgLz4nKX1hLnB1c2goIjwvZ192bWxfOnNoYXBlPiIpO3RoaXMuZWxlbWVudF8uaW5zZXJ0QWRqYWNlbnRIVE1MKCJiZWZvcmVFbmQiLGEuam9pbigiIikpfTtpLmZpbGw9ZnVuY3Rpb24oKXt0aGlzLnN0cm9rZSh0cnVlKX07aS5jbG9zZVBhdGg9ZnVuY3Rpb24oKXt0aGlzLmN1cnJlbnRQYXRoXy5wdXNoKHt0eXBlOiJjbG9zZSJ9KX07aS5nZXRDb29yZHNfPWZ1bmN0aW9uKGIsYSl7dmFyIGM9dGhpcy5tXztyZXR1cm57eDprKihiKmNbMF1bMF0rYSpjWzFdWzBdK2NbMl1bMF0pLXYseTprKihiKmNbMF1bMV0rYSpjWzFdWzFdK2NbMl1bMV0pLXZ9fTtpLnNhdmU9ZnVuY3Rpb24oKXt2YXIgYj17fTtPKHRoaXMsYik7dGhpcy5hU3RhY2tfLnB1c2goYik7dGhpcy5tU3RhY2tfLnB1c2godGhpcy5tXyk7dGhpcy5tXz15KEkoKSx0aGlzLm1fKX07aS5yZXN0b3JlPWZ1bmN0aW9uKCl7Tyh0aGlzLmFTdGFja18ucG9wKCksDQoJCQl0aGlzKTt0aGlzLm1fPXRoaXMubVN0YWNrXy5wb3AoKX07ZnVuY3Rpb24gaGEoYil7dmFyIGE9MDtmb3IoO2E8MzthKyspe3ZhciBjPTA7Zm9yKDtjPDI7YysrKWlmKCFpc0Zpbml0ZShiW2FdW2NdKXx8aXNOYU4oYlthXVtjXSkpcmV0dXJuIGZhbHNlfXJldHVybiB0cnVlfWZ1bmN0aW9uIEEoYixhLGMpe2lmKCEhaGEoYSkpe2IubV89YTtpZihjKWIubGluZVNjYWxlXz1XKFYoYVswXVswXSphWzFdWzFdLWFbMF1bMV0qYVsxXVswXSkpfX1pLnRyYW5zbGF0ZT1mdW5jdGlvbihiLGEpe0EodGhpcyx5KFtbMSwwLDBdLFswLDEsMF0sW2IsYSwxXV0sdGhpcy5tXyksZmFsc2UpfTtpLnJvdGF0ZT1mdW5jdGlvbihiKXt2YXIgYT1HKGIpLGM9RihiKTtBKHRoaXMseShbW2EsYywwXSxbLWMsYSwwXSxbMCwwLDFdXSx0aGlzLm1fKSxmYWxzZSl9O2kuc2NhbGU9ZnVuY3Rpb24oYixhKXt0aGlzLmFyY1NjYWxlWF8qPWI7dGhpcy5hcmNTY2FsZVlfKj1hO0EodGhpcyx5KFtbYiwwLDBdLFswLGEsDQoJCQkwXSxbMCwwLDFdXSx0aGlzLm1fKSx0cnVlKX07aS50cmFuc2Zvcm09ZnVuY3Rpb24oYixhLGMsZCxmLGgpe0EodGhpcyx5KFtbYixhLDBdLFtjLGQsMF0sW2YsaCwxXV0sdGhpcy5tXyksdHJ1ZSl9O2kuc2V0VHJhbnNmb3JtPWZ1bmN0aW9uKGIsYSxjLGQsZixoKXtBKHRoaXMsW1tiLGEsMF0sW2MsZCwwXSxbZixoLDFdXSx0cnVlKX07aS5jbGlwPWZ1bmN0aW9uKCl7fTtpLmFyY1RvPWZ1bmN0aW9uKCl7fTtpLmNyZWF0ZVBhdHRlcm49ZnVuY3Rpb24oKXtyZXR1cm4gbmV3IFV9O2Z1bmN0aW9uIEQoYil7dGhpcy50eXBlXz1iO3RoaXMucjFfPXRoaXMueTFfPXRoaXMueDFfPXRoaXMucjBfPXRoaXMueTBfPXRoaXMueDBfPTA7dGhpcy5jb2xvcnNfPVtdfUQucHJvdG90eXBlLmFkZENvbG9yU3RvcD1mdW5jdGlvbihiLGEpe2E9UChhKTt0aGlzLmNvbG9yc18ucHVzaCh7b2Zmc2V0OmIsY29sb3I6YS5jb2xvcixhbHBoYTphLmFscGhhfSl9O2Z1bmN0aW9uIFUoKXt9R192bWxDYW52YXNNYW5hZ2VyPQ0KCQkJTTtDYW52YXNSZW5kZXJpbmdDb250ZXh0MkQ9SDtDYW52YXNHcmFkaWVudD1EO0NhbnZhc1BhdHRlcm49VX0pKCk7'
	

	$jquerycode              = [system.text.encoding]::utf8.getstring( [system.convert]::FromBase64String($base64jquery))
	$visualizejQueryJs       = [system.text.encoding]::utf8.getstring( [system.convert]::FromBase64String($base64jqueryPlugin))
	$visualizeJqueryCompiled = [system.text.encoding]::utf8.getstring( [system.convert]::FromBase64String($base64jQueryCompiledPlugin))
	
	@"
	<html>
		<head>
			<meta http-equiv="content-type" content="text/html; charset=utf-8" />
			<title>Data visualization</title>	
			<script type="text/javascript" >
				$jquerycode
			</script>
			
			<!--[if IE]>
			<script type="text/javascript">
				//Copyright 2006 Google Inc.
				//Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except in compliance with the License. You may obtain a copy of the License at http://www.apache.org/licenses/LICENSE-2.0 Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License.
				$visualizeJQueryJsCompiled	
			</script>
			<![endif]
			-->
			<script type="text/javascript">
				$visualizejQueryJs
			</script>
			<script type="text/javascript">
				`$(function(){
					//make some charts
					`$('table.values').visualize(
						{type: 'line', 
						width: 800, 
						height: 300, 
						colors: ['#be1e2d', '#666699', '#92d5ea', '#ee8310', '#8d10ee', '#5a3b16', '#26a4ed', '#f45a90', '#e9e744', '#31225a', 
						         '#10b0c3', '#aa010b', '#d0a3ee', '#5538aa', '#093106', '#a00ace', '#44acca', '#088888', '#773377', '#337700',
								 '#2299aa', '#33bb99']});
				});
			</script>
			<style>
				/* visualize/visualize.jquery.css */
				/*plugin styles*/
				.visualize { border: 1px solid #888; position: relative; background: #fafafa; }
				.visualize canvas { position: absolute; }
				.visualize ul,.visualize li { margin: 0; padding: 0;}
				
				/*table title, key elements*/
				.visualize .visualize-info { padding: 3px 5px; background: #fafafa; border: 1px solid #888; position: absolute; top: -20px; right: 10px; opacity: .8; }
				.visualize .visualize-title { display: block; color: #333; margin-bottom: 3px;  font-size: 1.1em; }
				.visualize ul.visualize-key { list-style: none;  }
				.visualize ul.visualize-key li { list-style: none; float: left; margin-right: 10px; padding-left: 10px; position: relative;}
				.visualize ul.visualize-key .visualize-key-color { width: 6px; height: 6px; left: 0; position: absolute; top: 50%; margin-top: -3px;  }
				.visualize ul.visualize-key .visualize-key-label { color: #000; }
				
				/*pie labels*/
				.visualize-pie .visualize-labels { list-style: none; }
				.visualize-pie .visualize-label-pos, .visualize-pie .visualize-label { position: absolute;  margin: 0; padding:0; }
				.visualize-pie .visualize-label { display: block; color: #fff; font-weight: bold; font-size: 1em; }
				.visualize-pie-outside .visualize-label { color: #000; font-weight: normal; }
				
				/*line,bar, area labels*/
				.visualize-labels-x,.visualize-labels-y { position: absolute; left: 0; top: 0; list-style: none; }
				.visualize-labels-x li, .visualize-labels-y li { position: absolute; bottom: 0; }
				.visualize-labels-x li span.label, .visualize-labels-y li span.label { position: absolute; color: #555;  }
				.visualize-labels-x li span.line, .visualize-labels-y li span.line {  position: absolute; border: 0 solid #ccc; }
				.visualize-labels-x li { height: 100%; }
				.visualize-labels-x li span.label { top: 100%; margin-top: 5px; }
				.visualize-labels-x li span.line { border-left-width: 1px; height: 100%; display: block; }
				.visualize-labels-x li span.line { border: 0;} /*hide vertical lines on area, line, bar*/
				.visualize-labels-y li { width: 100%;  }
				.visualize-labels-y li span.label { right: 100%; margin-right: 5px; display: block; width: 100px; text-align: right; }
				.visualize-labels-y li span.line { border-top-width: 1px; width: 100%; }
				.visualize-bar .visualize-labels-x li span.label { width: 100%; text-align: center; }

				/* visualize/demopage.css */
				body { font-size: 62.5%; font-family: Verdana, sans-serif; }
				table.accessHide { display: none }
				caption {margin: 0 0 .5em; font-size: 1.5em; font-weight: bold; }
				.visualize { margin: 20px 0 0 30px; }
				/*sample alternate styling for info block on Pie Chart */
				.visualize-pie .visualize-info { top: 10px; border: 0; right: auto; left: 10px; padding: 0; background: none; }
				.visualize-pie ul.visualize-title { font-weight: bold; border: 0; }
				.visualize-pie ul.visualize-key li { float: none; }

				NO.visualize-labels-x {display:none}
				NO.visualize .visualize-key-label { font-size: 6pt }
				div.visualize {margin-left:10em }
				table.values { display: none }
			</style>
		</head>
		<body>
"@ ` + $tables +
	"</body></html>" | sc $outputFile -Encoding UTF8
	write-host "saved to $outputFile"
}

Export-ModuleMember New-ViChart,New-ViChartInfo